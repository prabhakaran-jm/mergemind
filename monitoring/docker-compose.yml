# Docker Compose for monitoring stack
version: '3.8'

services:
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - monitoring

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    restart: unless-stopped
    networks:
      - monitoring

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring

  # cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped
    networks:
      - monitoring

  # BigQuery Exporter
  bigquery-exporter:
    build:
      context: ./exporters/bigquery-exporter
      dockerfile: Dockerfile
    container_name: bigquery-exporter
    ports:
      - "8081:8080"
    environment:
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - BQ_DATASET_RAW=${BQ_DATASET_RAW}
      - BQ_DATASET_MODELED=${BQ_DATASET_MODELED}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials.json
    volumes:
      - ./credentials.json:/app/credentials.json:ro
    restart: unless-stopped
    networks:
      - monitoring

  # GitLab Exporter
  gitlab-exporter:
    build:
      context: ./exporters/gitlab-exporter
      dockerfile: Dockerfile
    container_name: gitlab-exporter
    ports:
      - "8082:8080"
    environment:
      - GITLAB_BASE_URL=${GITLAB_BASE_URL}
      - GITLAB_TOKEN=${GITLAB_TOKEN}
    restart: unless-stopped
    networks:
      - monitoring

  # Vertex AI Exporter
  vertex-ai-exporter:
    build:
      context: ./exporters/vertex-ai-exporter
      dockerfile: Dockerfile
    container_name: vertex-ai-exporter
    ports:
      - "8083:8080"
    environment:
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - VERTEX_LOCATION=${VERTEX_LOCATION}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials.json
    volumes:
      - ./credentials.json:/app/credentials.json:ro
    restart: unless-stopped
    networks:
      - monitoring

  # Stackdriver Exporter
  stackdriver-exporter:
    image: prometheuscommunity/stackdriver-exporter:latest
    container_name: stackdriver-exporter
    ports:
      - "8084:8080"
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials.json
    volumes:
      - ./credentials.json:/app/credentials.json:ro
    restart: unless-stopped
    networks:
      - monitoring

  # Redis (for caching and session storage)
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - monitoring

volumes:
  prometheus_data:
  alertmanager_data:
  grafana_data:
  redis_data:

networks:
  monitoring:
    driver: bridge
